package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/kazmerdome/best-ever-golang-starter/internal/module/category"
	"github.com/kazmerdome/best-ever-golang-starter/internal/module/post"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, data category.CreateDto) (*category.Category, error) {
	return r.CategoryService.CreateCategory(ctx, data)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id uuid.UUID, data category.UpdateDto) (*category.Category, error) {
	return r.CategoryService.UpdateCategory(ctx, id, data)
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id uuid.UUID) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, data post.CreateDto) (*post.Post, error) {
	return r.PostService.CreatePost(ctx, data)
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id uuid.UUID, data post.UpdateDto) (*post.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id uuid.UUID) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// Category is the resolver for the category field.
func (r *postResolver) Category(ctx context.Context, obj *post.Post) (*category.Category, error) {
	return r.CategoryService.LoadCategory(ctx, obj.Category)
}

// GetCategory is the resolver for the getCategory field.
func (r *queryResolver) GetCategory(ctx context.Context, id uuid.UUID) (*category.Category, error) {
	return r.CategoryService.GetCategory(ctx, id)
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context, where *category.WhereDto) ([]category.Category, error) {
	return r.CategoryService.ListCategories(ctx, where)
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id uuid.UUID) (*post.Post, error) {
	return r.PostService.GetPost(ctx, id)
}

// ListPosts is the resolver for the listPosts field.
func (r *queryResolver) ListPosts(ctx context.Context, where *post.WhereDto) ([]post.Post, error) {
	return r.PostService.ListPosts(ctx, where)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
