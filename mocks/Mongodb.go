// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mongodb "github.com/kazmerdome/best-ever-golang-starter/internal/actor/db/mongodb"
	mock "github.com/stretchr/testify/mock"
)

// Mongodb is an autogenerated mock type for the Mongodb type
type Mongodb struct {
	mock.Mock
}

type Mongodb_Expecter struct {
	mock *mock.Mock
}

func (_m *Mongodb) EXPECT() *Mongodb_Expecter {
	return &Mongodb_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with no fields
func (_m *Mongodb) Connect() mongodb.Mongodb {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 mongodb.Mongodb
	if rf, ok := ret.Get(0).(func() mongodb.Mongodb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Mongodb)
		}
	}

	return r0
}

// Mongodb_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Mongodb_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *Mongodb_Expecter) Connect() *Mongodb_Connect_Call {
	return &Mongodb_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *Mongodb_Connect_Call) Run(run func()) *Mongodb_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mongodb_Connect_Call) Return(_a0 mongodb.Mongodb) *Mongodb_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mongodb_Connect_Call) RunAndReturn(run func() mongodb.Mongodb) *Mongodb_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with no fields
func (_m *Mongodb) Disconnect() {
	_m.Called()
}

// Mongodb_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Mongodb_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *Mongodb_Expecter) Disconnect() *Mongodb_Disconnect_Call {
	return &Mongodb_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *Mongodb_Disconnect_Call) Run(run func()) *Mongodb_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mongodb_Disconnect_Call) Return() *Mongodb_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mongodb_Disconnect_Call) RunAndReturn(run func()) *Mongodb_Disconnect_Call {
	_c.Run(run)
	return _c
}

// GetDatabase provides a mock function with no fields
func (_m *Mongodb) GetDatabase() mongodb.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 mongodb.Database
	if rf, ok := ret.Get(0).(func() mongodb.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Database)
		}
	}

	return r0
}

// Mongodb_GetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabase'
type Mongodb_GetDatabase_Call struct {
	*mock.Call
}

// GetDatabase is a helper method to define mock.On call
func (_e *Mongodb_Expecter) GetDatabase() *Mongodb_GetDatabase_Call {
	return &Mongodb_GetDatabase_Call{Call: _e.mock.On("GetDatabase")}
}

func (_c *Mongodb_GetDatabase_Call) Run(run func()) *Mongodb_GetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mongodb_GetDatabase_Call) Return(_a0 mongodb.Database) *Mongodb_GetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mongodb_GetDatabase_Call) RunAndReturn(run func() mongodb.Database) *Mongodb_GetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *Mongodb) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mongodb_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Mongodb_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Mongodb_Expecter) Ping() *Mongodb_Ping_Call {
	return &Mongodb_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Mongodb_Ping_Call) Run(run func()) *Mongodb_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mongodb_Ping_Call) Return(_a0 error) *Mongodb_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mongodb_Ping_Call) RunAndReturn(run func() error) *Mongodb_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewMongodb creates a new instance of Mongodb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongodb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mongodb {
	mock := &Mongodb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
