// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	post "gitlab.com/kazmerdome/best-ever-golang-starter/internal/module/post"

	uuid "github.com/google/uuid"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

type PostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PostRepository) EXPECT() *PostRepository_Expecter {
	return &PostRepository_Expecter{mock: &_m.Mock}
}

// CreateOne provides a mock function with given fields: ctx, data
func (_m *PostRepository) CreateOne(ctx context.Context, data post.CreateDto) (*post.Post, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, post.CreateDto) (*post.Post, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, post.CreateDto) *post.Post); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, post.CreateDto) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type PostRepository_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - data post.CreateDto
func (_e *PostRepository_Expecter) CreateOne(ctx interface{}, data interface{}) *PostRepository_CreateOne_Call {
	return &PostRepository_CreateOne_Call{Call: _e.mock.On("CreateOne", ctx, data)}
}

func (_c *PostRepository_CreateOne_Call) Run(run func(ctx context.Context, data post.CreateDto)) *PostRepository_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(post.CreateDto))
	})
	return _c
}

func (_c *PostRepository_CreateOne_Call) Return(_a0 *post.Post, _a1 error) *PostRepository_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_CreateOne_Call) RunAndReturn(run func(context.Context, post.CreateDto) (*post.Post, error)) *PostRepository_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, id
func (_m *PostRepository) DeleteOne(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type PostRepository_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostRepository_Expecter) DeleteOne(ctx interface{}, id interface{}) *PostRepository_DeleteOne_Call {
	return &PostRepository_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, id)}
}

func (_c *PostRepository_DeleteOne_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostRepository_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostRepository_DeleteOne_Call) Return(_a0 error) *PostRepository_DeleteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_DeleteOne_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PostRepository_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, where
func (_m *PostRepository) GetMany(ctx context.Context, where *post.WhereDto) ([]post.Post, error) {
	ret := _m.Called(ctx, where)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.WhereDto) ([]post.Post, error)); ok {
		return rf(ctx, where)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *post.WhereDto) []post.Post); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *post.WhereDto) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type PostRepository_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - where *post.WhereDto
func (_e *PostRepository_Expecter) GetMany(ctx interface{}, where interface{}) *PostRepository_GetMany_Call {
	return &PostRepository_GetMany_Call{Call: _e.mock.On("GetMany", ctx, where)}
}

func (_c *PostRepository_GetMany_Call) Run(run func(ctx context.Context, where *post.WhereDto)) *PostRepository_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*post.WhereDto))
	})
	return _c
}

func (_c *PostRepository_GetMany_Call) Return(_a0 []post.Post, _a1 error) *PostRepository_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_GetMany_Call) RunAndReturn(run func(context.Context, *post.WhereDto) ([]post.Post, error)) *PostRepository_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyByIds provides a mock function with given fields: ctx, ids
func (_m *PostRepository) GetManyByIds(ctx context.Context, ids []uuid.UUID) ([]*post.Post, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetManyByIds")
	}

	var r0 []*post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*post.Post, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*post.Post); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_GetManyByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyByIds'
type PostRepository_GetManyByIds_Call struct {
	*mock.Call
}

// GetManyByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *PostRepository_Expecter) GetManyByIds(ctx interface{}, ids interface{}) *PostRepository_GetManyByIds_Call {
	return &PostRepository_GetManyByIds_Call{Call: _e.mock.On("GetManyByIds", ctx, ids)}
}

func (_c *PostRepository_GetManyByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *PostRepository_GetManyByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *PostRepository_GetManyByIds_Call) Return(_a0 []*post.Post, _a1 error) *PostRepository_GetManyByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_GetManyByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*post.Post, error)) *PostRepository_GetManyByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *PostRepository) GetOneById(ctx context.Context, id uuid.UUID) (*post.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneById")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*post.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *post.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_GetOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneById'
type PostRepository_GetOneById_Call struct {
	*mock.Call
}

// GetOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostRepository_Expecter) GetOneById(ctx interface{}, id interface{}) *PostRepository_GetOneById_Call {
	return &PostRepository_GetOneById_Call{Call: _e.mock.On("GetOneById", ctx, id)}
}

func (_c *PostRepository_GetOneById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostRepository_GetOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostRepository_GetOneById_Call) Return(_a0 *post.Post, _a1 error) *PostRepository_GetOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_GetOneById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*post.Post, error)) *PostRepository_GetOneById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOneById provides a mock function with given fields: ctx, id, data
func (_m *PostRepository) UpdateOneById(ctx context.Context, id uuid.UUID, data post.UpdateDto) (*post.Post, error) {
	ret := _m.Called(ctx, id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneById")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, post.UpdateDto) (*post.Post, error)); ok {
		return rf(ctx, id, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, post.UpdateDto) *post.Post); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, post.UpdateDto) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_UpdateOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOneById'
type PostRepository_UpdateOneById_Call struct {
	*mock.Call
}

// UpdateOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - data post.UpdateDto
func (_e *PostRepository_Expecter) UpdateOneById(ctx interface{}, id interface{}, data interface{}) *PostRepository_UpdateOneById_Call {
	return &PostRepository_UpdateOneById_Call{Call: _e.mock.On("UpdateOneById", ctx, id, data)}
}

func (_c *PostRepository_UpdateOneById_Call) Run(run func(ctx context.Context, id uuid.UUID, data post.UpdateDto)) *PostRepository_UpdateOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(post.UpdateDto))
	})
	return _c
}

func (_c *PostRepository_UpdateOneById_Call) Return(_a0 *post.Post, _a1 error) *PostRepository_UpdateOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_UpdateOneById_Call) RunAndReturn(run func(context.Context, uuid.UUID, post.UpdateDto) (*post.Post, error)) *PostRepository_UpdateOneById_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
