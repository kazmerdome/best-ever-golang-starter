// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	category "github.com/kazmerdome/best-ever-golang-starter/internal/module/category"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

type CategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CategoryRepository) EXPECT() *CategoryRepository_Expecter {
	return &CategoryRepository_Expecter{mock: &_m.Mock}
}

// CreateOne provides a mock function with given fields: ctx, data
func (_m *CategoryRepository) CreateOne(ctx context.Context, data category.CreateDto) (*category.Category, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 *category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, category.CreateDto) (*category.Category, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, category.CreateDto) *category.Category); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, category.CreateDto) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRepository_CreateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOne'
type CategoryRepository_CreateOne_Call struct {
	*mock.Call
}

// CreateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - data category.CreateDto
func (_e *CategoryRepository_Expecter) CreateOne(ctx interface{}, data interface{}) *CategoryRepository_CreateOne_Call {
	return &CategoryRepository_CreateOne_Call{Call: _e.mock.On("CreateOne", ctx, data)}
}

func (_c *CategoryRepository_CreateOne_Call) Run(run func(ctx context.Context, data category.CreateDto)) *CategoryRepository_CreateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(category.CreateDto))
	})
	return _c
}

func (_c *CategoryRepository_CreateOne_Call) Return(_a0 *category.Category, _a1 error) *CategoryRepository_CreateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRepository_CreateOne_Call) RunAndReturn(run func(context.Context, category.CreateDto) (*category.Category, error)) *CategoryRepository_CreateOne_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) DeleteOne(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CategoryRepository_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type CategoryRepository_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *CategoryRepository_Expecter) DeleteOne(ctx interface{}, id interface{}) *CategoryRepository_DeleteOne_Call {
	return &CategoryRepository_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, id)}
}

func (_c *CategoryRepository_DeleteOne_Call) Run(run func(ctx context.Context, id uuid.UUID)) *CategoryRepository_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CategoryRepository_DeleteOne_Call) Return(_a0 error) *CategoryRepository_DeleteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CategoryRepository_DeleteOne_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *CategoryRepository_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, where
func (_m *CategoryRepository) GetMany(ctx context.Context, where *category.WhereDto) ([]category.Category, error) {
	ret := _m.Called(ctx, where)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *category.WhereDto) ([]category.Category, error)); ok {
		return rf(ctx, where)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *category.WhereDto) []category.Category); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *category.WhereDto) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRepository_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type CategoryRepository_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - where *category.WhereDto
func (_e *CategoryRepository_Expecter) GetMany(ctx interface{}, where interface{}) *CategoryRepository_GetMany_Call {
	return &CategoryRepository_GetMany_Call{Call: _e.mock.On("GetMany", ctx, where)}
}

func (_c *CategoryRepository_GetMany_Call) Run(run func(ctx context.Context, where *category.WhereDto)) *CategoryRepository_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*category.WhereDto))
	})
	return _c
}

func (_c *CategoryRepository_GetMany_Call) Return(_a0 []category.Category, _a1 error) *CategoryRepository_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRepository_GetMany_Call) RunAndReturn(run func(context.Context, *category.WhereDto) ([]category.Category, error)) *CategoryRepository_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyByIds provides a mock function with given fields: ctx, ids
func (_m *CategoryRepository) GetManyByIds(ctx context.Context, ids []uuid.UUID) ([]*category.Category, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetManyByIds")
	}

	var r0 []*category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*category.Category, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*category.Category); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRepository_GetManyByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyByIds'
type CategoryRepository_GetManyByIds_Call struct {
	*mock.Call
}

// GetManyByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *CategoryRepository_Expecter) GetManyByIds(ctx interface{}, ids interface{}) *CategoryRepository_GetManyByIds_Call {
	return &CategoryRepository_GetManyByIds_Call{Call: _e.mock.On("GetManyByIds", ctx, ids)}
}

func (_c *CategoryRepository_GetManyByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *CategoryRepository_GetManyByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *CategoryRepository_GetManyByIds_Call) Return(_a0 []*category.Category, _a1 error) *CategoryRepository_GetManyByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRepository_GetManyByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*category.Category, error)) *CategoryRepository_GetManyByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) GetOneById(ctx context.Context, id uuid.UUID) (*category.Category, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneById")
	}

	var r0 *category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*category.Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *category.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRepository_GetOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneById'
type CategoryRepository_GetOneById_Call struct {
	*mock.Call
}

// GetOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *CategoryRepository_Expecter) GetOneById(ctx interface{}, id interface{}) *CategoryRepository_GetOneById_Call {
	return &CategoryRepository_GetOneById_Call{Call: _e.mock.On("GetOneById", ctx, id)}
}

func (_c *CategoryRepository_GetOneById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *CategoryRepository_GetOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *CategoryRepository_GetOneById_Call) Return(_a0 *category.Category, _a1 error) *CategoryRepository_GetOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRepository_GetOneById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*category.Category, error)) *CategoryRepository_GetOneById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOneById provides a mock function with given fields: ctx, id, data
func (_m *CategoryRepository) UpdateOneById(ctx context.Context, id uuid.UUID, data category.UpdateDto) (*category.Category, error) {
	ret := _m.Called(ctx, id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneById")
	}

	var r0 *category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, category.UpdateDto) (*category.Category, error)); ok {
		return rf(ctx, id, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, category.UpdateDto) *category.Category); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, category.UpdateDto) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryRepository_UpdateOneById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOneById'
type CategoryRepository_UpdateOneById_Call struct {
	*mock.Call
}

// UpdateOneById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - data category.UpdateDto
func (_e *CategoryRepository_Expecter) UpdateOneById(ctx interface{}, id interface{}, data interface{}) *CategoryRepository_UpdateOneById_Call {
	return &CategoryRepository_UpdateOneById_Call{Call: _e.mock.On("UpdateOneById", ctx, id, data)}
}

func (_c *CategoryRepository_UpdateOneById_Call) Run(run func(ctx context.Context, id uuid.UUID, data category.UpdateDto)) *CategoryRepository_UpdateOneById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(category.UpdateDto))
	})
	return _c
}

func (_c *CategoryRepository_UpdateOneById_Call) Return(_a0 *category.Category, _a1 error) *CategoryRepository_UpdateOneById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryRepository_UpdateOneById_Call) RunAndReturn(run func(context.Context, uuid.UUID, category.UpdateDto) (*category.Category, error)) *CategoryRepository_UpdateOneById_Call {
	_c.Call.Return(run)
	return _c
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
