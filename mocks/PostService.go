// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	post "github.com/kazmerdome/best-ever-golang-starter/internal/module/post"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

type PostService_Expecter struct {
	mock *mock.Mock
}

func (_m *PostService) EXPECT() *PostService_Expecter {
	return &PostService_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, data
func (_m *PostService) CreatePost(ctx context.Context, data post.CreateDto) (*post.Post, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, post.CreateDto) (*post.Post, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, post.CreateDto) *post.Post); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, post.CreateDto) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type PostService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - data post.CreateDto
func (_e *PostService_Expecter) CreatePost(ctx interface{}, data interface{}) *PostService_CreatePost_Call {
	return &PostService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, data)}
}

func (_c *PostService_CreatePost_Call) Run(run func(ctx context.Context, data post.CreateDto)) *PostService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(post.CreateDto))
	})
	return _c
}

func (_c *PostService_CreatePost_Call) Return(_a0 *post.Post, _a1 error) *PostService_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostService_CreatePost_Call) RunAndReturn(run func(context.Context, post.CreateDto) (*post.Post, error)) *PostService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *PostService) DeletePost(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostService_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type PostService_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostService_Expecter) DeletePost(ctx interface{}, id interface{}) *PostService_DeletePost_Call {
	return &PostService_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, id)}
}

func (_c *PostService_DeletePost_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostService_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostService_DeletePost_Call) Return(_a0 error) *PostService_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostService_DeletePost_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PostService_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function with given fields: ctx, id
func (_m *PostService) GetPost(ctx context.Context, id uuid.UUID) (*post.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*post.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *post.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostService_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type PostService_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostService_Expecter) GetPost(ctx interface{}, id interface{}) *PostService_GetPost_Call {
	return &PostService_GetPost_Call{Call: _e.mock.On("GetPost", ctx, id)}
}

func (_c *PostService_GetPost_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostService_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostService_GetPost_Call) Return(_a0 *post.Post, _a1 error) *PostService_GetPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostService_GetPost_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*post.Post, error)) *PostService_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// ListPosts provides a mock function with given fields: ctx, where
func (_m *PostService) ListPosts(ctx context.Context, where *post.WhereDto) ([]post.Post, error) {
	ret := _m.Called(ctx, where)

	if len(ret) == 0 {
		panic("no return value specified for ListPosts")
	}

	var r0 []post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *post.WhereDto) ([]post.Post, error)); ok {
		return rf(ctx, where)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *post.WhereDto) []post.Post); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *post.WhereDto) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostService_ListPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPosts'
type PostService_ListPosts_Call struct {
	*mock.Call
}

// ListPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - where *post.WhereDto
func (_e *PostService_Expecter) ListPosts(ctx interface{}, where interface{}) *PostService_ListPosts_Call {
	return &PostService_ListPosts_Call{Call: _e.mock.On("ListPosts", ctx, where)}
}

func (_c *PostService_ListPosts_Call) Run(run func(ctx context.Context, where *post.WhereDto)) *PostService_ListPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*post.WhereDto))
	})
	return _c
}

func (_c *PostService_ListPosts_Call) Return(_a0 []post.Post, _a1 error) *PostService_ListPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostService_ListPosts_Call) RunAndReturn(run func(context.Context, *post.WhereDto) ([]post.Post, error)) *PostService_ListPosts_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPost provides a mock function with given fields: ctx, id
func (_m *PostService) LoadPost(ctx context.Context, id uuid.UUID) (*post.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for LoadPost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*post.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *post.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostService_LoadPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPost'
type PostService_LoadPost_Call struct {
	*mock.Call
}

// LoadPost is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PostService_Expecter) LoadPost(ctx interface{}, id interface{}) *PostService_LoadPost_Call {
	return &PostService_LoadPost_Call{Call: _e.mock.On("LoadPost", ctx, id)}
}

func (_c *PostService_LoadPost_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PostService_LoadPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PostService_LoadPost_Call) Return(_a0 *post.Post, _a1 error) *PostService_LoadPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostService_LoadPost_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*post.Post, error)) *PostService_LoadPost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, id, data
func (_m *PostService) UpdatePost(ctx context.Context, id uuid.UUID, data post.UpdateDto) (*post.Post, error) {
	ret := _m.Called(ctx, id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, post.UpdateDto) (*post.Post, error)); ok {
		return rf(ctx, id, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, post.UpdateDto) *post.Post); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, post.UpdateDto) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostService_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type PostService_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - data post.UpdateDto
func (_e *PostService_Expecter) UpdatePost(ctx interface{}, id interface{}, data interface{}) *PostService_UpdatePost_Call {
	return &PostService_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, id, data)}
}

func (_c *PostService_UpdatePost_Call) Run(run func(ctx context.Context, id uuid.UUID, data post.UpdateDto)) *PostService_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(post.UpdateDto))
	})
	return _c
}

func (_c *PostService_UpdatePost_Call) Return(_a0 *post.Post, _a1 error) *PostService_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostService_UpdatePost_Call) RunAndReturn(run func(context.Context, uuid.UUID, post.UpdateDto) (*post.Post, error)) *PostService_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
