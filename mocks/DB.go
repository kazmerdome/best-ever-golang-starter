// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	db "github.com/kazmerdome/best-ever-golang-starter/internal/actor/db/sql"
	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *DB) Connect() db.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 db.DB
	if rf, ok := ret.Get(0).(func() db.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.DB)
		}
	}

	return r0
}

// DB_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type DB_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *DB_Expecter) Connect() *DB_Connect_Call {
	return &DB_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *DB_Connect_Call) Run(run func()) *DB_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Connect_Call) Return(_a0 db.DB) *DB_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Connect_Call) RunAndReturn(run func() db.DB) *DB_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields:
func (_m *DB) Disconnect() {
	_m.Called()
}

// DB_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type DB_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *DB_Expecter) Disconnect() *DB_Disconnect_Call {
	return &DB_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *DB_Disconnect_Call) Run(run func()) *DB_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Disconnect_Call) Return() *DB_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *DB_Disconnect_Call) RunAndReturn(run func()) *DB_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *DB) GetDB() db.SqlDB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 db.SqlDB
	if rf, ok := ret.Get(0).(func() db.SqlDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.SqlDB)
		}
	}

	return r0
}

// DB_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type DB_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *DB_Expecter) GetDB() *DB_GetDB_Call {
	return &DB_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *DB_GetDB_Call) Run(run func()) *DB_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_GetDB_Call) Return(_a0 db.SqlDB) *DB_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_GetDB_Call) RunAndReturn(run func() db.SqlDB) *DB_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *DB) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DB_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type DB_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *DB_Expecter) GetName() *DB_GetName_Call {
	return &DB_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *DB_GetName_Call) Run(run func()) *DB_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_GetName_Call) Return(_a0 string) *DB_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_GetName_Call) RunAndReturn(run func() string) *DB_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *DB) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type DB_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *DB_Expecter) Ping() *DB_Ping_Call {
	return &DB_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *DB_Ping_Call) Run(run func()) *DB_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Ping_Call) Return(_a0 error) *DB_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Ping_Call) RunAndReturn(run func() error) *DB_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
